@inject DialogService DialogService
@inject IDillonRPGServiceClient _client
@inject ILogger<CreateTribeComponent> _logger

<RadzenText TextStyle="TextStyle.H6" Text="Create Tribe" />

<div class="row mb-5">
    <div class="col mb-3">
        <RadzenLabel Text="Enter Tribe Name" />
        <div>
            <RadzenTextBox @bind-Value="@_tribeName" />
        </div>
    </div>
    <div class="col mb-3">
        <DropDownWithCreateButtonComponent Data="Abilities.Select(a => a.Name).Distinct()"
                                           LabelText="Select Ability"
                                           OnChange="(object str) => AbilityChanged(str)"
                                           ButtonClick="OpenManageAbilities" />
    </div>

    <div class="col mb-3">
        <DropDownWithCreateButtonComponent Data="Classes.Select(d => d.Name).Distinct()"
                                           LabelText="Select Class"
                                           ButtonClick="OpenManageClasses" 
                                           OnChange="(object str) => ClassChanged(str)" />
    </div>
    <div class="col mb-3">
        <DropDownWithCreateButtonComponent Data="Families.Select(f => f.Name).Distinct()"
                                           LabelText="Select Family"
                                           ButtonClick="OpenManageFamilies" 
                                           OnChange="(object str) => FamilyChanged(str)" />
    </div>
</div>
<div class="mb-3">
    <RadzenButton class="me-2" Click="CreateTribe" Text="Create" ButtonStyle="ButtonStyle.Primary" />
    <RadzenButton Click=@(HideComponent) Text="Cancel" ButtonStyle="ButtonStyle.Secondary" />
</div>
@code {
    private string _tribeName = string.Empty;
    private DialogOptions _dOptions = new DialogOptions() { Style = "max-height:75%" };
    private RadzenDropDown<string> check = new();
    [Parameter]
    public EventCallback HideComponent { get; set; }
    [Parameter]
    public IEnumerable<Ability> Abilities { get; set; } = Enumerable.Empty<Ability>();
    [Parameter]
    public IEnumerable<Class> Classes { get; set; } = Enumerable.Empty<Class>();
    [Parameter]
    public IEnumerable<Family> Families { get; set; } = Enumerable.Empty<Family>();

    private Ability? _selectedAbility = new();
    private Class? _selectedClass = new();
    private Family? _selectedFamily = new();

    private void AbilityChanged(object val)
    {
        string? value = val as string;
        if (!string.IsNullOrEmpty(value))
        {
            _selectedAbility = Abilities.Where(a => a.Name.Equals(value, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
    }

    private void ClassChanged(object val)
    {
        string? value = val as string;
        if (!string.IsNullOrEmpty(value))
        {
            _selectedClass = Classes.Where(a => a.Name.Equals(value, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
    }

    private void FamilyChanged(object val)
    {
        string? value = val as string;
        if (!string.IsNullOrEmpty(value))
        {
            _selectedFamily = Families.Where(a => a.Name.Equals(value, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
    }


    private async Task CreateTribe()
    {
        Tribe tribe = new()
            {
                TribeName = _tribeName,
                Ability = _selectedAbility,
                Class = _selectedClass,
                Family = _selectedFamily
            };

        await _client.TribesServiceClient.PostTribe(tribe).HandleResults<Tribe>(success: (result) =>
        {
            Tribe? res = result?.Content;
        },
        failure: (result) =>
        {
            result.Error!.LogFailure(_logger, nameof(FamiliesServiceClient.PostFamily));
        });
    }

    private async Task OpenManageAbilities()
    {
        await DialogService.OpenAsync<ManageAbilitiesComponent>("",
        new Dictionary<string, object>(){
            { nameof(ManageAbilitiesComponent.Abilities), Abilities}},
            _dOptions);
    }

    private async Task OpenManageClasses()
    {
        await DialogService.OpenAsync<ManageClassesComponent>("",
        new Dictionary<string, object>(){
            { nameof(ManageClassesComponent.Classes), Classes}},
            _dOptions);
    }
    private async Task OpenManageFamilies()
    {
        await DialogService.OpenAsync<ManageFamiliesComponent>("",
        new Dictionary<string, object>(){
            { nameof(ManageFamiliesComponent.Families), Families}},
            _dOptions);
    }
}
