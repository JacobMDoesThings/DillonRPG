@inject IDillonRPGServiceClient _client;
@inject ILogger<ManageTribesComponent> _logger;

<RadzenText Text="Manage Tribes" TextStyle="TextStyle.H3" />

@{
    if (_showCreateTribeComponent)
    {
        <CreateTribeComponent HideComponent="()=>_showCreateTribeComponent = false"
                      Abilities="Abilities"
                      Classes="Classes"
                      Families="Families" />
    }
    else
    {
        <RadzenButton class="mb-3" Shade="Shade.Lighter" Click=@(() => _showCreateTribeComponent = true) Text="Create Tribe" ButtonStyle="ButtonStyle.Primary" />
    }
}
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="25" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="tribes" TItem="Tribe" LogicalFilterOperator="LogicalFilterOperator.Or" @ref="_dataGrid">
    <Columns>
        <RadzenDataGridColumn TItem="Tribe" Property="@nameof(Tribe.TribeName)" Title="Tribe Name" />
        <RadzenDataGridColumn TItem="Tribe" Property="@nameof(Tribe.Ability)" Title="Ability">
            <Template Context="abilityContext">
                @abilityContext?.Ability?.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Tribe" Property="@nameof(Tribe.Class)" Title="Class">
            <Template Context="classContext">
                @classContext?.Class?.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Tribe" Property="@nameof(Tribe.Family)" Title="Family">
            <Template Context="familyContext">
                @familyContext?.Family?.Name
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Tribe>? _dataGrid = new();
    private IEnumerable<Tribe> _tribes = Enumerable.Empty<Tribe>();
    private IEnumerable<Tribe> tribes
    {
        get => _tribes;
        set
        {
            _tribes = value;
            _dataGrid?.Reload();
            InvokeAsync(StateHasChanged);
        }
    }

    private bool _showCreateTribeComponent;
    private IEnumerable<Ability> _abilities = Enumerable.Empty<Ability>();
    private IEnumerable<Class> _classes = Enumerable.Empty<Class>();
    private IEnumerable<Family> _families = Enumerable.Empty<Family>();

    [Parameter]
    public IEnumerable<Ability> Abilities
    {
        get => _abilities;
        set
        {
            _abilities = value;
        }
    }

    [Parameter]
    public IEnumerable<Class> Classes
    {
        get => _classes;
        set
        {
            _classes = value;
        }
    }

    [Parameter]
    public IEnumerable<Family> Families
    {
        get => _families;
        set
        {
            _families = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _client.TribesServiceClient.GetTribes().HandleResults<IEnumerable<Tribe>>(success: (result) =>
            {
                tribes = result?.Content ?? Enumerable.Empty<Tribe>();
            },
            failure: (result) =>
            {
                result.Error!.LogFailure(_logger, nameof(TribeServiceClient.GetTribes));
            });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnCreateTribeClick()
    {

    }
}
