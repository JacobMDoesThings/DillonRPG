@using System.Diagnostics;
@inject TooltipService _tooltipService
<div class="h-100 w-100 overflow-auto">
    <div>
        <span>
            <label for="BackgroundDropdown"><RadzenText class="rz-color-primary-dark">Select Background</RadzenText></label>
            <RadzenDropDown id="BackgroundDropdown" Data="Backgrounds" Value="SelectedBackground" TValue="string" ValueChanged="OnSelectedBackgroundChange"
                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
        </span>
    </div>
    <div class="w-100 mt-3">
        @{
            if (Rules.Count > 0)
            {
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.H6" Class="rz-color-primary-light"><strong>Traits</strong></RadzenText>
                    <ul>
                        @{
                            foreach (var rule in Rules)
                            {
                                <li class="d-inline-flex pe-2 pb-2">
                                    <RadzenText class="rz-color-primary-dark">@rule.Name</RadzenText>

                                </li>
                                <ul>
                                    @{
                                        foreach (var description in rule.Rules)
                                        {
                                            <li class="d-inline-flex pe-2 pb-2">
                                                <RadzenText class="rz-color-secondary-light">@description</RadzenText>
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        }
                    </ul>
                </RadzenCard>

                <div class=" my-3">
                    <label for="BackgroundDescription"><RadzenText class="rz-color-primary-dark">Background Description</RadzenText></label>
                    <RadzenTextArea Disabled="true" id="BackgroundDescription" Rows="10" Value="@Description" class="w-100" />
                </div>
            }
        }
    </div>
</div>

@code {
    List<string> Backgrounds = new();
    string SelectedBackground = string.Empty;
    string Description = string.Empty;
    const string DescriptionBase = "Generic Description...";
    List<Rule> Rules = new();
    bool changing;

    protected override Task OnInitializedAsync()
    {
        Backgrounds.Add("Mercenary");
        Backgrounds.Add("Hero");
        Backgrounds.Add("Acolyte");

        return base.OnInitializedAsync();
    }


    private void CreateRules()
    {
        Rules.Clear();
        Rules.Add(new Rule
            {
                Name = "Barbarianism",
                Rules = new List<string>
            {
            "+2 attack",
            "+1 AC"
            }
            });

        Rules.Add(new Rule
            {
                Name = "Sickly",
                Rules = new List<string>
            {
            "+2 Constitution",
            "-2 Charisma"
            }
            });
        Rules.Add(new Rule
            {
                Name = "NightStalker",
                Rules = new List<string>
            {
            "Night Vision"
            }
            });
    }

    private async void OnSelectedBackgroundChange(object val)
    {
        changing = true;
        string value = val as string ?? string.Empty;
        Description = string.Empty;

        if (string.IsNullOrEmpty(value))
        {
            return;
        }

        Description = $"{val} {DescriptionBase}";
        CreateRules();

        changing = false;
        await InvokeAsync(StateHasChanged);

    }

    private struct Rule
    {
        public string Name;
        public List<string> Rules;
    }
}
