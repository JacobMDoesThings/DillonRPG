@page "/"
@inject IDillonRPGServiceClient _dillonClient;
@inject ILogger<Index> _logger;
@inject SecurityGroups _sg;

<PageTitle>Index</PageTitle>
<AuthorizeView Policy="@_sg.DillonGodMode!.SecurityGroupPolicyName">
    <Authorized>
        <ManageTribesComponent Abilities="abilities"
                               Classes="classes" 
                               Families="families" />
    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<Ability>? _abilities = Enumerable.Empty<Ability>();
    private IEnumerable<Class>? _classes = Enumerable.Empty<Class>();
    private IEnumerable<Family>? _families = Enumerable.Empty<Family>();

    private IEnumerable<Ability>? abilities
    {
        get => _abilities;
        set
        {
            _abilities = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private IEnumerable<Class>? classes
    {
        get => _classes;
        set
        {
            _classes = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private IEnumerable<Family>? families
    {
        get => _families;
        set
        {
            _families = value;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var getAbilities = _dillonClient.AbilitiesServiceClient.GetAbilities().HandleResults<IEnumerable<Ability>>(success: (result) =>
           {
               abilities = result.Content;
           },
           failure: (result) =>
           {
               result.Error!.LogFailure(_logger, nameof(AbilitiesServiceClient.GetAbilities));
           });

            var getClasses = _dillonClient.ClassesServiceClient.GetClasses().HandleResults<IEnumerable<Class>>(success: (result) =>
           {
               classes = result.Content;
           },
           failure: (result) =>
           {
               result.Error!.LogFailure(_logger, nameof(ClassesServiceClient.GetClasses));
           });

            var getFamilies = _dillonClient.FamiliesServiceClient.GetFamilies().HandleResults<IEnumerable<Family>>(success: (result) =>
            {
                families = result.Content;
            },
            failure: (result) =>
            {
                result.Error!.LogFailure(_logger, nameof(FamiliesServiceClient.GetFamilies));
            });

            await Task.WhenAll(getAbilities, getClasses, getFamilies);
        }
        base.OnAfterRender(firstRender);
    }
}