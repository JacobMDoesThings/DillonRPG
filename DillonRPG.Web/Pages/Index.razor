@page "/"
@inject IWeatherServiceClient _weatherClient;
@inject ILogger<Index> _logger;
@inject SecurityGroups _sg;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<AuthorizeView Policy="@_sg.DillonGodMode!.SecurityGroupPolicyName">
    <Authorized>
        God Mode.
        @{
            if (forecasts is not null)
            {
                foreach (var forecast in forecasts)
                {
                    <div>@forecast.TemperatureC</div>
                }
            }
        }
        <AuthorizeView Context="Test" Policy="@_sg.Test!.SecurityGroupPolicyName">
            Test Mode.
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        Not God Mode.
        <AuthorizeView Context="Test" Policy="@_sg.Test!.SecurityGroupPolicyName">
            Test Mode.
        </AuthorizeView>
    </NotAuthorized>

</AuthorizeView>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    private bool _loadData;
    IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _weatherClient.GetWeatherForecast().HandleResults<IEnumerable<WeatherForecast>>(success: async (result) =>
            {
                forecasts = result.Content;
                _loadData = true;
                await InvokeAsync(StateHasChanged);
            },
            failure: (result) =>
            {
                result.Error!.LogFailure(_logger, nameof(WeatherServiceClient.GetWeatherForecast));
            });

            base.OnAfterRender(firstRender);
        }
    }
}